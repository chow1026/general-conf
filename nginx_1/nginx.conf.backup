
user  _www wheel;
worker_processes  1;

error_log /var/log/nginx/nginx.error.log; 
error_log /var/log/nginx/nginx.error.log notice; 
error_log /var/log/nginx/nginx.error.log info;


#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;
pid /var/tmp/nginx.pid;

events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  /var/log/nginx/nginx.access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       8080;
        server_name  localhost;
        root         /Library/WebServer/Documents/nginx;
	
        #charset koi8-r;

        access_log  /var/log/nginx/nginx.access.log  main;
	
	# This bit tells nginx how to serve files that are in /css and /img
        # This is necessary since we're using Angular
        #  - if you aren't hosting any single page webapps, you probably won't need this
	location ~ ^/(css|img) {
            gzip_static on;

            #Don't cache anything
            expires -1;
            add_header Pragma "no-cache";
            add_header Cache-Control "no-store, no-cache, must-revalidate, post-check=0, pre-check=0";
            break;
        }

	# For PHP
        location ~ \.php$ {
            #try_files $uri =404;
            #fastcgi_param PATH_INFO $fastcgi_path_info;
            #fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;
            #fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;

            #fastcgi_pass 127.0.0.1:9000;
            #fastcgi_index index.php;
            #fastcgi_split_path_info ^(.+\.php)(/.+)$;
            #fastcgi_intercept_errors on;
            #include fastcgi_params;

	    fastcgi_split_path_info ^(.+?\.php)(/.*)$;
	    fastcgi_intercept_errors on;
            fastcgi_pass unix:/var/tmp/php-fpm.sock;
            fastcgi_index index.php;
            fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;
            include fastcgi_params;
        }


	# For everything that isn't in /css or /img
        location / {
            #root   ngnix;
            index   index.php index.html;

	    # This tells NGINX to first find and serve a file specified by the uri,
            # otherwise go to index.html.
	    #try_files $uri /index.html;

	    #Don't cache anything
	    expires -1;
	    add_header Pragma "no-cache";
	    add_header Cache-Control "no-store, no-cache, must-revalidate, post-check=0, pre-check=0";
	    break;
        }

	#location ~ \.php$ {
        #    try_files $uri =404;
       	#    fastcgi_param PATH_INFO $fastcgi_path_info;
        #    fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;
        #    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;

        #    fastcgi_pass 127.0.0.1:9000;
        #    fastcgi_index index.php;
        #    fastcgi_split_path_info ^(.+\.php)(/.+)$;
        #    fastcgi_intercept_errors on;
        #    include fastcgi_params;
	#}

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}

	#include servers/*;
	#include /usr/local/etc/nginx/sites-enabled/*;
    }

    include /usr/local/etc/nginx/sites-enabled/*;


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
    include servers/*;
    include fastcgi.conf;
}
